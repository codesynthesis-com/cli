.\" Process this file with
.\" groff -man -Tascii cli.1
.\"
.TH CLI 1 "December 2009" "CLI 1.2.0"
.SH NAME
cli \- command line interface compiler for C++
.\"
.\"
.\"
.\"--------------------------------------------------------------------
.SH SYNOPSIS
.\"--------------------------------------------------------------------
.B cli
.B [
.I options
.B ]
.I file
.\"
.\"
.\"
.\"--------------------------------------------------------------------
.SH DESCRIPTION
.\"--------------------------------------------------------------------
.B cli
generates C++ implementation and documentation in various formats for a
command line interface defined in the CLI language. For an input file in
the form
.B name.cli
the following is generated. By default or if the
.B --generate-cxx
option is specified, the following C++ files are generated:
.B name.hxx
(header file),
.B name.ixx
(inline file, generated unless the
.B --suppress-inline
option is specified), and
.B name.cxx (source file).
If the
.B --generate-html
option is specified, then the
.B name.html
HTML documentation file is generated. If the
.B --generate-man
option is specified, then the
.B name.1
man page file is generated. When
.B --generate-html
or
.B --generate-man
is specified, the
.B --stdout
option can be used to redirect the output to STDOUT instead of a file.
.\"
.\"
.\"
.\"--------------------------------------------------------------------
.SH OPTIONS
.\"--------------------------------------------------------------------
.IP "\fB--help\fP"
Print usage information and exit\.
.IP "\fB--version\fP"
Print version and exit\.
.IP "\fB--include-path\fP|\fB-I\fP \fIdir\fP"
Search \fIdir\fP for bracket-included (\fB<>\fP) options files\.
.IP "\fB--output-dir\fP|\fB-o\fP \fIdir\fP"
Write the generated files to \fIdir\fP instead of the current directory\.
.IP "\fB--generate-modifier\fP"
Generate option value modifiers in addition to accessors\.
.IP "\fB--generate-specifier\fP"
Generate functions for determining whether the option was specified on the
command line\.
.IP "\fB--generate-parse\fP"
Generate \fBparse()\fP functions instead of parsing constructors\. This is
primarily useful for being able to parse into an already initialized options
class instance, for example, to implement merging/overriding\.
.IP "\fB--generate-description\fP"
Generate the option description list that can be examined at runtime\.
.IP "\fB--generate-file-scanner\fP"
Generate the argv_file_scanner implementation\. This scanner is capable of
reading command line arguments from the argv array as well as files specified
with command line options\.
.IP "\fB--suppress-inline\fP"
Generate all functions non-inline\. By default simple functions are made
inline\. This option suppresses creation of the inline file\.
.IP "\fB--cli-namespace\fP \fIns\fP"
Generate the CLI support types in the \fIns\fP namespace (\fBcli\fP by
default)\. The namespace can be nested, for example \fBdetails::cli\fP\. If
the namespace is empty, then the support types are generated in the global
namespace\.
.IP "\fB--ostream-type\fP \fItype\fP"
Output stream type instead of the default \fBstd::ostream\fP that should be
used to print usage and exception information\.
.IP "\fB--generate-cxx\fP"
Generate C++ code\. If neither \fB--generate-man\fP nor \fB--generate-html\fP
is specified, this mode is assumed by default\.
.IP "\fB--generate-man\fP"
Generate documentation in the man page format\.
.IP "\fB--generate-html\fP"
Generate documentation in the HTML format\.
.IP "\fB--stdout\fP"
Write output to STDOUT instead of a file\. This option is not valid when
generating C++ code and is normally used to combine generated documentation
for several option classes in a single file\.
.IP "\fB--suppress-undocumented\fP"
Suppress the generation of documentation entries for undocumented options\.
.IP "\fB--suppress-usage\fP"
Suppress the generation of the usage printing code\.
.IP "\fB--long-usage\fP"
If no short documentation string is provided, use the complete long
documentation string in usage\. By default, in this situation only the first
sentence from the long string is used\.
.IP "\fB--short-usage\fP"
If specified together with \fB--long-usage\fP, generate both short and long
usage versions\. In this mode, the usage printing functions are called
\fBprint_short_usage()\fP and \fBprint_long_usage()\fP and for the long usage
the long documentation string is always used, even if the short version is
provided\.
.IP "\fB--option-length\fP \fIlen\fP"
Indent option descriptions \fIlen\fP characters when printing usage\. This is
useful when you have multiple options classes, potentially in separate files,
and would like their usage to have the same indentation level\.
.IP "\fB--exclude-base\fP"
Exclude base class information from usage and documentation\.
.IP "\fB--class\fP \fIfq-name\fP"
Generate the man page or HTML documentation only for the \fIfq-name\fP options
class\. The \fIfq-name\fP name should be a fully-qualified options class name,
for example, \fBapp::options\fP\. To generate documentation for multiple
classes, repeat this option and the documentation will be produced in the
order specified\. This functionality is useful if you need to assemble
documentation from multiple classes in a specific order or to insert custom
documentation between options belonging to different classes\.
.IP "\fB--docvar\fP|\fB-v\fP \fIname\fP=\fIval\fP"
Set documentation variable \fIname\fP to the value \fIval\fP\. Documentation
variables can be substituted in prologues and epilogues (see
\fB--*-prologue*\fP and \fB--*-epilogue*\fP options) using the
\fB$\fP\fIname\fP\fB$\fP expansion syntax (use \fB$$\fP to escape expansion)\.
They can also be defined in \fB\.cli\fP files using the
"\e\fIname\fP=\fIval\fP" syntax\.
.IP "\fB--hxx-prologue\fP \fItext\fP"
Insert \fItext\fP at the beginning of the generated C++ header file\.
.IP "\fB--ixx-prologue\fP \fItext\fP"
Insert \fItext\fP at the beginning of the generated C++ inline file\.
.IP "\fB--cxx-prologue\fP \fItext\fP"
Insert \fItext\fP at the beginning of the generated C++ source file\.
.IP "\fB--man-prologue\fP \fItext\fP"
Insert \fItext\fP at the beginning of the generated man page file\.
.IP "\fB--html-prologue\fP \fItext\fP"
Insert \fItext\fP at the beginning of the generated HTML file\.
.IP "\fB--hxx-epilogue\fP \fItext\fP"
Insert \fItext\fP at the end of the generated C++ header file\.
.IP "\fB--ixx-epilogue\fP \fItext\fP"
Insert \fItext\fP at the end of the generated C++ inline file\.
.IP "\fB--cxx-epilogue\fP \fItext\fP"
Insert \fItext\fP at the end of the generated C++ source file\.
.IP "\fB--man-epilogue\fP \fItext\fP"
Insert \fItext\fP at the end of the generated man page text\.
.IP "\fB--html-epilogue\fP \fItext\fP"
Insert \fItext\fP at the end of the generated HTML text\.
.IP "\fB--hxx-prologue-file\fP \fIfile\fP"
Insert the content of \fIfile\fP at the beginning of the generated C++ header
file\.
.IP "\fB--ixx-prologue-file\fP \fIfile\fP"
Insert the content of \fIfile\fP at the beginning of the generated C++ inline
file\.
.IP "\fB--cxx-prologue-file\fP \fIfile\fP"
Insert the content of \fIfile\fP at the beginning of the generated C++ source
file\.
.IP "\fB--man-prologue-file\fP \fIfile\fP"
Insert the content of \fIfile\fP at the beginning of the generated man page
file\.
.IP "\fB--html-prologue-file\fP \fIfile\fP"
Insert the content of \fIfile\fP at the beginning of the generated HTML file\.
.IP "\fB--hxx-epilogue-file\fP \fIfile\fP"
Insert the content of \fIfile\fP at the end of the generated C++ header file\.
.IP "\fB--ixx-epilogue-file\fP \fIfile\fP"
Insert the content of \fIfile\fP at the end of the generated C++ inline file\.
.IP "\fB--cxx-epilogue-file\fP \fIfile\fP"
Insert the content of \fIfile\fP at the end of the generated C++ source file\.
.IP "\fB--man-epilogue-file\fP \fIfile\fP"
Insert the content of \fIfile\fP at the end of the generated man page file\.
.IP "\fB--html-epilogue-file\fP \fIfile\fP"
Insert the content of \fIfile\fP at the end of the generated HTML file\.
.IP "\fB--hxx-suffix\fP \fIsuffix\fP"
Use \fIsuffix\fP instead of the default \fB\.hxx\fP to construct the name of
the generated header file\.
.IP "\fB--ixx-suffix\fP \fIsuffix\fP"
Use \fIsuffix\fP instead of the default \fB\.ixx\fP to construct the name of
the generated inline file\.
.IP "\fB--cxx-suffix\fP \fIsuffix\fP"
Use \fIsuffix\fP instead of the default \fB\.cxx\fP to construct the name of
the generated source file\.
.IP "\fB--man-suffix\fP \fIsuffix\fP"
Use \fIsuffix\fP instead of the default \fB\.1\fP to construct the name of the
generated man page file\.
.IP "\fB--html-suffix\fP \fIsuffix\fP"
Use \fIsuffix\fP instead of the default \fB\.html\fP to construct the name of
the generated HTML file\.
.IP "\fB--option-prefix\fP \fIprefix\fP"
Use \fIprefix\fP instead of the default \fB-\fP as an option prefix\. Unknown
command line arguments that start with this prefix are treated as unknown
options\. If you set the option prefix to the empty value, then all the
unknown command line arguments will be treated as program arguments\.
.IP "\fB--option-separator\fP \fIsep\fP"
Use \fIsep\fP instead of the default \fB--\fP as an optional separator between
options and arguments\. All the command line arguments that are parsed after
this separator are treated as program arguments\. Set the option separator to
the empty value if you don't want this functionality\.
.IP "\fB--include-with-brackets\fP"
Use angle brackets (<>) instead of quotes ("") in the generated \fB#include\fP
directives\.
.IP "\fB--include-prefix\fP \fIprefix\fP"
Add \fIprefix\fP to the generated \fB#include\fP directive paths\.
.IP "\fB--guard-prefix\fP \fIprefix\fP"
Add \fIprefix\fP to the generated header inclusion guards\. The prefix is
transformed to upper case and characters that are illegal in a preprocessor
macro name are replaced with underscores\.
.IP "\fB--reserved-name\fP \fIname\fP=\fIrep\fP"
Add \fIname\fP with an optional \fIrep\fP replacement to the list of names
that should not be used as identifiers\. If provided, the replacement name is
used instead\. All C++ keywords are already in this list\.
.IP "\fB--options-file\fP \fIfile\fP"
Read additional options from \fIfile\fP with each option appearing on a
separate line optionally followed by space and an option value\. Empty lines
and lines starting with \fB#\fP are ignored\. Option values can be enclosed in
double (\fB"\fP) or single (\fB'\fP) quotes  to preserve leading and trailing
whitespaces as well as to specify empty values\. If the value itself contains
trailing or leading quotes, enclose it with an extra pair of quotes, for
example \fB'"x"'\fP\. Non-leading and non-trailing quotes are interpreted as
being part of the option value\.

The semantics of providing options in a file is equivalent to providing the
same set of options in the same order on the command line at the point where
the \fB--options-file\fP option is specified except that the shell escaping
and quoting is not required\. Repeat this option to specify more than one
options file\.
.\"
.\" DIAGNOSTICS
.\"
.SH DIAGNOSTICS
If the input file is not a valid CLI definition,
.B cli
will issue diagnostic messages to STDERR and exit with non-zero exit code.
.\"
.\" BUGS
.\"
.SH BUGS
Send bug reports to the cli-users@codesynthesis.com mailing list.
.\"
.\" COPYRIGHT
.\"
.SH COPYRIGHT
Copyright (c) 2009-2011 Code Synthesis Tools CC.

Permission is granted to copy, distribute and/or modify this document under
the terms of the MIT License. Copy of this license can be obtained from
http://www.codesynthesis.com/licenses/mit.txt
